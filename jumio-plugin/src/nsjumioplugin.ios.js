"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Nsjumioplugin = (function (_super) {
    __extends(Nsjumioplugin, _super);
    function Nsjumioplugin() {
        return _super.call(this) || this;
    }
    Nsjumioplugin.prototype.start = function (merchantApiToken, merchantApiSecret, customerEmail, cancelWithError, finishInitWithError, finishedScan) {
        this.cancelWithError = cancelWithError;
        this.finishInitWithError = finishInitWithError;
        this.finishedScan = finishedScan;
        console.log("EEEEEEEEEEEE greet 9");
        this._vc = this.rootVC();
        var config = this.config;
        config = NetverifyConfiguration.new();
        config.merchantApiToken = merchantApiToken;
        config.merchantApiSecret = merchantApiSecret;
        this.delegate = this;
        config.delegate = this.delegate;
        config.customerId = customerEmail;
        try {
            this.netverifyViewController = NetverifyViewController.alloc().initWithConfiguration(config);
            this._vc.presentViewControllerAnimatedCompletion(this.netverifyViewController, false, function () {
                console.log('EEEEEEEEEEEE done');
            });
        }
        catch (e) {
            console.log('EEEEEEEEEEEE EXCEPTION HANDLED:', e);
        }
    };
    Nsjumioplugin.prototype.rootVC = function () {
        var appWindow = UIApplication.sharedApplication.keyWindow;
        return appWindow.rootViewController;
    };
    Nsjumioplugin.prototype.netverifyViewControllerDidCancelWithErrorScanReference = function (netverifyViewController, error, scanReference) {
        console.log("EEEEEEEEEEE 1");
        this._vc.dismissViewControllerAnimatedCompletion(true, null);
        this.cancelWithError();
        this.netverifyViewController.destroy();
    };
    Nsjumioplugin.prototype.netverifyViewControllerDidFinishInitializingWithError = function (netverifyViewController, error) {
        console.log("EEEEEEEEEEE 2");
        if (error) {
            this.finishInitWithError();
            this._vc.dismissViewControllerAnimatedCompletion(true, null);
            this.netverifyViewController.destroy();
        }
    };
    Nsjumioplugin.prototype.netverifyViewControllerDidFinishWithDocumentDataScanReference = function (netverifyViewController, documentData, scanReference) {
        console.log("EEEEEEEEEEE 3");
        console.log("finished successfully with scan reference: %@", scanReference);
        this.finishedScan(netverifyViewController, documentData, scanReference);
        this._vc.dismissViewControllerAnimatedCompletion(true, null);
        this.netverifyViewController.destroy();
    };
    Nsjumioplugin.ObjCProtocols = [NetverifyViewControllerDelegate];
    return Nsjumioplugin;
}(NSObject));
exports.Nsjumioplugin = Nsjumioplugin;
//# sourceMappingURL=data:application/json;base64,